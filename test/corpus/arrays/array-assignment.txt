================
Array assignment
================

// declare array reference (by not specifying a capacity)
int foo[];

// we can now assign any int[] to foo
[ 1, 2, 3 ] @=> foo;

// print out 0th element
<<< foo[0] >>>;

---

(source_file
  (comment)
  (array_declaration
    (primitive_type)
    (array_identifier
      (variable_identifier)))
  (comment)
  (chuck_operation
    (array
      (int)
      (int)
      (int))
    (variable_identifier))
  (comment)
  (debug_print
    (array_identifier
      (variable_identifier)
      (int))))

================================
Functions with array parameters
================================

// our function
fun void print( int bar[] )
{
    // print it
    for( 0 => int i; i < bar.size(); i++ )
        <<< bar[0] >>>;
}

// we can call the function with a literal
print( [ 1, 2, 3, 4, 5 ] );

// or can we can pass a reference variable
int foo[10];
print( foo );

---

(source_file
  (comment)
  (function_definition
    (primitive_type)
    (variable_identifier)
    (array_declaration
      (primitive_type)
      (array_identifier
        (variable_identifier)))
    (block
      (comment)
      (for_loop
        (chuck_operation
          (int)
          (variable_declaration
            (primitive_type)
            (variable_identifier)))
        (binary_expression
          (variable_identifier)
          (operator)
          (function_call
            (member_identifier
              (variable_identifier)
              (variable_identifier))))
        (increment_expression
          (variable_identifier))
        (debug_print
          (array_identifier
            (variable_identifier)
            (int))))))
  (comment)
  (function_call
    (variable_identifier)
    (array
      (int)
      (int)
      (int)
      (int)
      (int)))
  (comment)
  (array_declaration
    (primitive_type)
    (array_identifier
      (variable_identifier)
      (int)))
  (function_call
    (variable_identifier)
    (variable_identifier)))

==========
References
==========

// our single array
int the_array[10];

// assign reference to foo and bar
the_array => int foo[] => int bar[];

// (the_array, foo, and bar now all reference the same array)

// we change the_array and print foo...
// they reference the same array, changing one is like changing the other
5 => the_array[0];
<<< foo[0] >>>; // should be 5

---

(source_file
  (comment)
  (array_declaration
    (primitive_type)
    (array_identifier
      (variable_identifier)
      (int)))
  (comment)
  (chuck_operation
    (chuck_operation
      (variable_identifier)
      (array_declaration
        (primitive_type)
        (array_identifier
          (variable_identifier))))
    (array_declaration
      (primitive_type)
      (array_identifier
        (variable_identifier))))
  (comment)
  (comment)
  (comment)
  (chuck_operation
    (int)
    (array_identifier
      (variable_identifier)
      (int)))
  (debug_print
    (array_identifier
      (variable_identifier)
      (int)))
  (comment))

============
Sub-sections
============

// a 3D array
int foo3D[4][4][4];

// we can make a reference to a sub-section
foo3D[2] => int bar[][];

// (note that the dimensions must add up!)

---

(source_file
  (comment)
  (array_declaration
    (primitive_type)
    (array_identifier
      (variable_identifier)
      (int)
      (int)
      (int)))
  (comment)
  (chuck_operation
    (array_identifier
      (variable_identifier)
      (int))
    (array_declaration
      (primitive_type)
      (array_identifier
        (variable_identifier))))
  (comment))
