================
Array assignment
================

// declare array reference (by not specifying a capacity)
int foo[];

// we can now assign any int[] to foo
[ 1, 2, 3 ] @=> foo;

// print out 0th element
<<< foo[0] >>>;

// our function
fun void print( int bar[] )
{
    // print it
    for( 0 => int i; i < bar.size(); i++ )
        <<< bar[0] >>>;
}

// we can call the function with a literal
print( [ 1, 2, 3, 4, 5 ] );

// or can we can pass a reference variable
int foo[10];
print( foo );

---

(source_file
  (comment)
  (array_declaration
    (primitive_type)
    (array_identifier
      (variable_identifier)))
  (comment)
  (chuck_operation
    (array
      (int)
      (int)
      (int))
    (variable_identifier))
  (comment)
  (debug_print
    (array_identifier
      (variable_identifier)
      (int)))
  (comment)
  (function_definition
    (primitive_type)
    (variable_identifier)
    (array_declaration
      (primitive_type)
      (array_identifier
        (variable_identifier)))
    (block
      (comment)
      (for_loop
        (chuck_operation
          (int)
          (variable_declaration
            (primitive_type)
            (variable_identifier)))
        (binary_expression
          (variable_identifier)
          (operator)
          (function_call
            (member_identifier
              (variable_identifier)
              (variable_identifier))))
        (increment_expression
          (variable_identifier))
        (debug_print
          (array_identifier
            (variable_identifier)
            (int))))))
  (comment)
  (function_call
    (variable_identifier)
    (array
      (int)
      (int)
      (int)
      (int)
      (int)))
  (comment)
  (array_declaration
    (primitive_type)
    (array_identifier
      (variable_identifier)
      (int)))
  (function_call
    (variable_identifier)
    (variable_identifier)))
