======
Access
======

// declare an array of floats
[ 3.2, 5.0, 7 ] @=> float foo[];

// access the 0th element (debug print)
<<< foo[0] >>>; // hopefully 3.2

// set the 2nd element
8.5 => foo[2];

---

(source_file
  (comment)
  (statement
    (chuck_operation
      (array
        (float)
        (float)
        (int))
      (chuck_operator)
      (array_declaration
        (primitive_type)
        (array_identifier
          (variable_identifier)))))
  (comment)
  (statement
    (debug_print
      (member_identifier
        (array_identifier
          (variable_identifier)
          (int)))))
  (comment)
  (comment)
  (statement
    (chuck_operation
      (float)
      (chuck_operator)
      (member_identifier
        (array_identifier
          (variable_identifier)
          (int))))))

========
For-each
========

// array of floats again
[ 1, 2, 3, 4, 5, 6 ] @=> float foo[];

// for each element 'e' in array 'foo'
for( int e : foo )
{
    // do something (debug print)
    <<< e >>>;
}

---

(source_file
  (comment)
  (statement
    (chuck_operation
      (array
        (int)
        (int)
        (int)
        (int)
        (int)
        (int))
      (chuck_operator)
      (array_declaration
        (primitive_type)
        (array_identifier
          (variable_identifier)))))
  (comment)
  (for_each_loop
    (variable_declaration
      (primitive_type)
      (variable_identifier))
    (variable_identifier)
    (block
      (comment)
      (statement
        (debug_print
          (member_identifier
            (variable_identifier)))))))

=====================================
Loop over initialization with "auto"
=====================================

// for each element 'x' in array 'foo'
// FYI by context, x will be inferred here to have type 'int'
for( auto x : [1,2,3] )
{
    // do something (debug print)
    <<< x >>>;
}

---

(source_file
  (comment)
  (comment)
  (for_each_loop
    (variable_declaration
      (primitive_type)
      (variable_identifier))
    (array
      (int)
      (int)
      (int))
    (block
      (comment)
      (statement
        (debug_print
          (member_identifier
            (variable_identifier)))))))

=========================
Multi-dimensional access
=========================

// 2D array
int foo[4][4];

// set an element
10 => foo[2][2];

---

(source_file
  (comment)
  (statement
    (array_declaration
      (primitive_type)
      (array_identifier
        (variable_identifier)
        (int)
        (int))))
  (comment)
  (statement
    (chuck_operation
      (int)
      (chuck_operator)
      (member_identifier
        (array_identifier
          (variable_identifier)
          (int)
          (int))))))

=============
Out of bounds
=============

// array capacity is 5
int foo[5];

// this should cause ArrayOutOfBoundsException
// access element 6 (index 5)
<<< foo[5] >>>;

---

(source_file
  (comment)
  (statement
    (array_declaration
      (primitive_type)
      (array_identifier
        (variable_identifier)
        (int))))
  (comment)
  (comment)
  (statement
    (debug_print
      (member_identifier
        (array_identifier
          (variable_identifier)
          (int))))))

=======================
Longer program example
=======================

// the period
.5::second => dur T;
// synchronize to period (for on-the-fly synchronization)
T - (now % T) => now;

// our patch
SinOsc s => JCRev r => dac;
// initialize
.05 => s.gain;
.25 => r.mix;

// scale (pentatonic; in semitones)
[ 0, 2, 4, 7, 9 ] @=> int scale[];

// infinite time loop
while( true )
{
    // pick something from the scale
    scale[ Math.rand2(0,4) ] => float freq;
    // get the final freq
    Std.mtof( 69 + (Std.rand2(0,3)*12 + freq) ) => s.freq;
    // reset phase for extra bandwidth
    0 => s.phase;

    // advance time
    if( Std.randf() > -.5 ) .25::T => now;
    else .5::T => now;
}

---

(source_file
  (comment)
  (statement
    (chuck_operation
      (dur
        (float)
        (duration_identifier))
      (chuck_operator)
      (variable_declaration
        (primitive_type)
        (class_identifier))))
  (comment)
  (statement
    (chuck_operation
      (binary_expression
        (member_identifier
          (class_identifier))
        (operator)
        (binary_expression
          (keyword)
          (operator)
          (member_identifier
            (class_identifier))))
      (chuck_operator)
      (keyword)))
  (comment)
  (statement
    (chuck_operation
      (chuck_operation
        (variable_declaration
          (class_identifier)
          (variable_identifier))
        (chuck_operator)
        (variable_declaration
          (class_identifier)
          (variable_identifier)))
      (chuck_operator)
      (member_identifier
        (global_unit_generator))))
  (comment)
  (statement
    (chuck_operation
      (float)
      (chuck_operator)
      (member_identifier
        (variable_identifier)
        (variable_identifier))))
  (statement
    (chuck_operation
      (float)
      (chuck_operator)
      (member_identifier
        (variable_identifier)
        (variable_identifier))))
  (comment)
  (statement
    (chuck_operation
      (array
        (int)
        (int)
        (int)
        (int)
        (int))
      (chuck_operator)
      (array_declaration
        (primitive_type)
        (array_identifier
          (variable_identifier)))))
  (comment)
  (loop
    (keyword)
    (block
      (comment)
      (statement
        (chuck_operation
          (member_identifier
            (array_identifier
              (variable_identifier)
              (function_call
                (member_identifier
                  (class_identifier)
                  (variable_identifier))
                (int)
                (int))))
          (chuck_operator)
          (variable_declaration
            (primitive_type)
            (variable_identifier))))
      (comment)
      (statement
        (chuck_operation
          (function_call
            (member_identifier
              (class_identifier)
              (variable_identifier))
            (binary_expression
              (int)
              (operator)
              (binary_expression
                (binary_expression
                  (function_call
                    (member_identifier
                      (class_identifier)
                      (variable_identifier))
                    (int)
                    (int))
                  (operator)
                  (int))
                (operator)
                (member_identifier
                  (variable_identifier)))))
          (chuck_operator)
          (member_identifier
            (variable_identifier)
            (variable_identifier))))
      (comment)
      (statement
        (chuck_operation
          (int)
          (chuck_operator)
          (member_identifier
            (variable_identifier)
            (variable_identifier))))
      (comment)
      (conditional
        (binary_expression
          (function_call
            (member_identifier
              (class_identifier)
              (variable_identifier)))
          (operator)
          (float))
        (statement
          (chuck_operation
            (dur
              (float)
              (class_identifier))
            (chuck_operator)
            (keyword)))
        (statement
          (chuck_operation
            (dur
              (float)
              (class_identifier))
            (chuck_operator)
            (keyword)))))))
