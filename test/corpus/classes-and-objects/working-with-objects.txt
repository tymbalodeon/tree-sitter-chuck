=============
Create object
=============

// create a Foo object; stored in reference variable bar
Foo bar;

---

(source_file
  (comment)
  (statement
    (variable_declaration
      (class_identifier)
      (variable_identifier))))

=====================
Reference declaration
=====================

// create a null reference to a Foo object
Foo @ bar;

---

(source_file
  (comment)
  (statement
    (reference_declaration
      (class_identifier)
      (variable_identifier))))

============
New instance
============

// assign new instance of Foo to bar
new Foo @=> Foo @ bar;

// (this statement is equivalent to 'Foo bar', above)

---

(source_file
  (comment)
  (statement
    (chuck_operation
      (class_instantiation
        (class_identifier))
      (chuck_operator)
      (reference_declaration
        (class_identifier)
        (variable_identifier))))
  (comment))

===================
Multiple references
===================

// make a Foo
Foo bar;

// reference assign to duh
bar @=> Foo @ duh;

// (now both bar and duh points to the same object)

---

(source_file
  (comment)
  (statement
    (variable_declaration
      (class_identifier)
      (variable_identifier)))
  (comment)
  (statement
    (chuck_operation
      (member_identifier
        (variable_identifier))
      (chuck_operator)
      (reference_declaration
        (class_identifier)
        (variable_identifier))))
  (comment))

====================
Member function call
====================

// make a Foo
Foo bar;

// call compute(), store result in boo
bar.compute( 1, 2 ) => int boo;

---

(source_file
  (comment)
  (statement
    (variable_declaration
      (class_identifier)
      (variable_identifier)))
  (comment)
  (statement
    (chuck_operation
      (function_call
        (member_identifier
          (variable_identifier)
          (variable_identifier))
        (int)
        (int))
      (chuck_operator)
      (variable_declaration
        (primitive_type)
        (variable_identifier)))))
