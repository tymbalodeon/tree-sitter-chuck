===========
Inheritance
===========

// define class X
class X
{
    // define member function
    fun void doThatThing()
    {
        <<<"Hallo">>>;
    }

    // define another
    fun void hey()
    {
        <<<"Hey!!!">>>;
    }

    // data
    int the_data;
}

// define child class Y
class Y extends X
{
    // override doThatThing()
    fun void doThatThing()
    {
        <<<"No! Get away from me!">>>;
    }
}

// instantiate a Y
Y y;

// call doThatThing
y.doThatThing();

// call hey() - should use X's hey(), since we didn't override
y.hey();

// data is also inherited from X
<<< y.the_data >>>;

---

(source_file
  (comment)
  (class_definition
    (class_identifier)
    (block
      (comment)
      (function_definition
        (primitive_type)
        (variable_identifier)
        (block
          (statement
            (debug_print
              (string)))))
      (comment)
      (function_definition
        (primitive_type)
        (variable_identifier)
        (block
          (statement
            (debug_print
              (string)))))
      (comment)
      (statement
        (variable_declaration
          (primitive_type)
          (variable_identifier)))))
  (comment)
  (class_definition
    (class_identifier)
    (class_identifier)
    (block
      (comment)
      (function_definition
        (primitive_type)
        (variable_identifier)
        (block
          (statement
            (debug_print
              (string)))))))
  (comment)
  (statement
    (variable_declaration
      (class_identifier)
      (variable_identifier)))
  (comment)
  (statement
    (function_call
      (member_identifier
        (variable_identifier)
        (variable_identifier))))
  (comment)
  (statement
    (function_call
      (member_identifier
        (variable_identifier)
        (variable_identifier))))
  (comment)
  (statement
    (debug_print
      (member_identifier
        (variable_identifier)
        (variable_identifier)))))

===================
Overriding behavior
===================

// parent class defines some basic data and methods 
class Xfunc
{ 
    int x; 

    fun int doSomething( int a, int b ) { 
        return 0; 
    }
}

// child class, which overrides the doSomething function with an addition operation
class Xadds extends Xfunc
{ 
    fun int doSomething ( int a, int b )
    { 
         return a + b ; 
    }
}

// child class, which overrides the doSomething function with a multiply operation 
class Xmuls extends Xfunc
{ 
    fun int doSomething ( int a, int b )
    { 
         return a * b; 
    }
}

// array of references to Xfunc
Xfunc @ operators[2];

// instantiate two children and assign reference to the array 
new Xadds @=> operators[0];
new Xmuls @=> operators[1];

// loop over the Xfunc
for( 0 => int i; i < operators.cap(); i++ )
{
    // doSomething, potentially different for each Xfunc
    <<< operators[i].doSomething( 4, 5 ) >>>;
}

---

(source_file
  (comment)
  (class_definition
    (class_identifier)
    (block
      (statement
        (variable_declaration
          (primitive_type)
          (variable_identifier)))
      (function_definition
        (primitive_type)
        (variable_identifier)
        (variable_declaration
          (primitive_type)
          (variable_identifier))
        (variable_declaration
          (primitive_type)
          (variable_identifier))
        (block
          (statement
            (int))))))
  (comment)
  (class_definition
    (class_identifier)
    (class_identifier)
    (block
      (function_definition
        (primitive_type)
        (variable_identifier)
        (variable_declaration
          (primitive_type)
          (variable_identifier))
        (variable_declaration
          (primitive_type)
          (variable_identifier))
        (block
          (statement
            (binary_expression
              (variable_identifier)
              (operator)
              (variable_identifier)))))))
  (comment)
  (class_definition
    (class_identifier)
    (class_identifier)
    (block
      (function_definition
        (primitive_type)
        (variable_identifier)
        (variable_declaration
          (primitive_type)
          (variable_identifier))
        (variable_declaration
          (primitive_type)
          (variable_identifier))
        (block
          (statement
            (binary_expression
              (variable_identifier)
              (operator)
              (variable_identifier)))))))
  (comment)
  (statement
    (reference_declaration
      (class_identifier)
      (array_identifier
        (variable_identifier)
        (int))))
  (comment)
  (statement
    (chuck_operation
      (class_instantiation
        (class_identifier))
      (chuck_operator)
      (array_identifier
        (variable_identifier)
        (int))))
  (statement
    (chuck_operation
      (class_instantiation
        (class_identifier))
      (chuck_operator)
      (array_identifier
        (variable_identifier)
        (int))))
  (comment)
  (for_loop
    (chuck_operation
      (int)
      (chuck_operator)
      (variable_declaration
        (primitive_type)
        (variable_identifier)))
    (binary_expression
      (variable_identifier)
      (operator)
      (function_call
        (member_identifier
          (variable_identifier)
          (variable_identifier))))
    (increment_expression
      (variable_identifier))
    (block
      (comment)
      (statement
        (debug_print
          (function_call
            (member_identifier
              (array_identifier
                (variable_identifier)
                (variable_identifier))
              (variable_identifier))
            (int)
            (int)))))))
