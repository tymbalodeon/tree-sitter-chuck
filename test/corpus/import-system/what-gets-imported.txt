===========================
Imports public classes only
===========================

// define a public Foo class (picked up by @import)
public class Foo
{
    // member variable
    int num;

    // constructor
    fun Foo( int n ) { n => num; }
}

// a non-public class definition (ignored by @import)
class Bar
{
    // ...
}

// public operator overloading + for Foo (picked up by @import)
public Foo @operator +( Foo lhs, Foo rhs )
{
    // return a new Foo
    return new Foo( lhs.num + rhs.num );
}

// non-public binary operator overload for '=>' (ignored by @import)
fun void @operator =^( Foo lhs, Foo rhs )
{
    // for sake of example, just print contents
    <<< lhs.num, "=^", rhs.num >>>;
}

// import Foo.ck
@import "Foo.ck"

// instantiate class defined in imported file
Foo a(1), b(2);

// use operator overload defined in imported file
<<< (a + b).num >>>;

---

(source_file
  (comment)
  (class_definition
    (class_identifier)
    (block
      (comment)
      (statement
        (variable_declaration
          (primitive_type)
          (variable_identifier)))
      (comment)
      (function_definition
        (class_identifier)
        (variable_declaration
          (primitive_type)
          (variable_identifier))
        (block
          (statement
            (chuck_operation
              (variable_identifier)
              (chuck_operator)
              (variable_identifier)))))))
  (comment)
  (class_definition
    (class_identifier)
    (block
      (comment)))
  (comment)
  (overload_definition
    (class_identifier)
    (operator)
    (variable_declaration
      (class_identifier)
      (variable_identifier))
    (variable_declaration
      (class_identifier)
      (variable_identifier))
    (block
      (comment)
      (statement
        (class_instantiation
          (function_call
            (class_identifier)
            (binary_expression
              (member_identifier
                (variable_identifier)
                (variable_identifier))
              (operator)
              (member_identifier
                (variable_identifier)
                (variable_identifier))))))))
  (comment)
  (overload_definition
    (primitive_type)
    (chuck_operator)
    (variable_declaration
      (class_identifier)
      (variable_identifier))
    (variable_declaration
      (class_identifier)
      (variable_identifier))
    (block
      (comment)
      (statement
        (debug_print
          (member_identifier
            (variable_identifier)
            (variable_identifier))
          (string)
          (member_identifier
            (variable_identifier)
            (variable_identifier))))))
  (comment)
  (import_expression
    (string))
  (comment)
  (statement
    (variable_declaration
      (class_identifier)
      (function_call
        (variable_identifier)
        (int))
      (function_call
        (variable_identifier)
        (int))))
  (comment)
  (statement
    (debug_print
      (binary_expression
        (variable_identifier)
        (operator)
        (variable_identifier))
      (variable_identifier))))
