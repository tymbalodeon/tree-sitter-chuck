======
Modulo
======

// 7 mod 4 (should yield 3)
7 % 4 => int result;

// 7.3 mod 3.2 floating point mod (should yield .9)
7.3 % 3.2 => float resultf;

// duration mod
5::second % 2::second => dur foo;

// time/duration mod
now % 5::second => dur bar;

---

(source_file
  (comment)
  (statement
    (chuck_operation
      (binary_expression
        (int)
        (operator)
        (int))
      (chuck_operator)
      (variable_declaration
        (primitive_type)
        (variable_identifier))))
  (comment)
  (statement
    (chuck_operation
      (binary_expression
        (float)
        (operator)
        (float))
      (chuck_operator)
      (variable_declaration
        (primitive_type)
        (variable_identifier))))
  (comment)
  (statement
    (chuck_operation
      (dur
        (binary_expression
          (dur
            (int)
            (duration_identifier))
          (operator)
          (int))
        (duration_identifier))
      (chuck_operator)
      (variable_declaration
        (primitive_type)
        (variable_identifier))))
  (comment)
  (statement
    (chuck_operation
      (dur
        (binary_expression
          (keyword)
          (operator)
          (int))
        (duration_identifier))
      (chuck_operator)
      (variable_declaration
        (primitive_type)
        (variable_identifier)))))

=====================
Time synchronization
=====================

// define period (agreed upon by several shreds)
.5::second => dur T;

// compute the remainder of the current period ...
// and advance time by that amount
T - (now % T) => now;

// when we reach this point, we are synchronized to T period boundary

// the rest of the code
// ...

---

(source_file
  (comment)
  (statement
    (chuck_operation
      (dur
        (float)
        (duration_identifier))
      (chuck_operator)
      (variable_declaration
        (primitive_type)
        (class_identifier))))
  (comment)
  (comment)
  (statement
    (chuck_operation
      (binary_expression
        (member_identifier
          (class_identifier))
        (operator)
        (binary_expression
          (keyword)
          (operator)
          (member_identifier
            (class_identifier))))
      (chuck_operator)
      (keyword)))
  (comment)
  (comment)
  (comment))
