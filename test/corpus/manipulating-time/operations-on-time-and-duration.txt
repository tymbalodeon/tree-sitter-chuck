===========
Time offset
===========

// time + dur yields time
now + 10::second => time later;

---

(source_file
  (comment)
  (chuck_operation
    (dur
      (binary_expression
        (keyword)
        (operator)
        (int))
      (duration_identifier))
    (variable_declaration
      (primitive_type)
      (variable_identifier))))

================
Time subtraction
================

// time - time yields dur
later - now => dur D;

---

(source_file
  (comment)
  (chuck_operation
    (binary_expression
      (variable_identifier)
      (operator)
      (keyword))
    (variable_declaration
      (primitive_type)
      (class_identifier))))

========
Addition
========

// dur + dur yields dur
10::second + 100::samp => dur foo;

---

(source_file
  (comment)
  (chuck_operation
    (dur
      (binary_expression
        (dur
          (int)
          (duration_identifier))
        (operator)
        (int))
      (duration_identifier))
    (variable_declaration
      (primitive_type)
      (variable_identifier))))

===========
Subtraction
===========

// dur - dur yields dur
10::second - 100::samp => dur bar;

---

(source_file
  (comment)
  (chuck_operation
    (dur
      (binary_expression
        (dur
          (int)
          (duration_identifier))
        (operator)
        (int))
      (duration_identifier))
    (variable_declaration
      (primitive_type)
      (variable_identifier))))

========
Division
========

// dur / dur yields number
10::second / 20::ms => float n;

---

(source_file
  (comment)
  (chuck_operation
    (dur
      (binary_expression
        (dur
          (int)
          (duration_identifier))
        (operator)
        (int))
      (duration_identifier))
    (variable_declaration
      (primitive_type)
      (variable_identifier))))

========
Time mod
========

// time mod dur yields dur
now % 1::second => dur remainder;

---

(source_file
  (comment)
  (chuck_operation
    (dur
      (binary_expression
        (keyword)
        (operator)
        (int))
      (duration_identifier))
    (variable_declaration
      (primitive_type)
      (variable_identifier))))

=====================
Synchronize to period
=====================

// synchronize to period of .5 second
.5::second => dur T;
T - (now % T) => now;

---

(source_file
  (comment)
  (chuck_operation
    (dur
      (float)
      (duration_identifier))
    (variable_declaration
      (primitive_type)
      (class_identifier)))
  (chuck_operation
    (binary_expression
      (class_identifier)
      (operator)
      (binary_expression
        (keyword)
        (operator)
        (class_identifier)))
    (keyword)))

==================
Comparison on time
==================

// compare time and time
if( t1 < t2 )
{
    // do something...
}

---

(source_file
  (comment)
  (conditional
    (binary_expression
      (variable_identifier)
      (operator)
      (variable_identifier))
    (block
      (comment))))

======================
Comparison on duration
======================

// compare dur and dur
if( 900::ms < 1::second )
    <<< "yay!" >>>;

---

(source_file
  (comment)
  (conditional
    (dur
      (binary_expression
        (dur
          (int)
          (duration_identifier))
        (operator)
        (int))
      (duration_identifier))
    (debug_print
      (string))))
