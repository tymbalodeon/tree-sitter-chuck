========
UAnaBlob
========

adc => FFT fft => blackhole;
// ... set FFT parameters here ...

UAnaBlob blob;

while (true) {
    500::ms => now; // use hop size of 50 ms
    fft.upchuck() @=> blob; // store the result in blob.
    blob.fvals() @=> float mag_spec[]; // get the magnitude spectrum as float array
    blob.cvals() @=> complex spec[]; // get the whole spectrum as complex array
    mag_spec[0] => float first_mag; // get the first bin of the magnitude spectrum
    blob.fval(0) => float first_mag2; // equivalent way to get first bin of mag spectrum
    fft.upchuck().fval(0) => float first_mag3; // yet another equivalent way

    fft.upchuck().cval(0) => complex first_spec; // similarly, get 1st spectrum bin

    blob.when() => time when_computed; // get the time it was computed
}

---

(source_file
  (statement
    (chuck_operation
      (chuck_operation
        (keyword
          (global_unit_generator))
        (chuck_operator)
        (variable_declaration
          (class_identifier)
          (variable_identifier)))
      (chuck_operator)
      (keyword
        (global_unit_generator))))
  (comment)
  (statement
    (variable_declaration
      (class_identifier)
      (variable_identifier)))
  (loop
    (keyword
      (special_literal_value))
    (block
      (statement
        (chuck_operation
          (dur
            (int)
            (duration_identifier))
          (chuck_operator)
          (keyword
            (special_literal_value))))
      (comment)
      (statement
        (chuck_operation
          (function_call
            (member_identifier
              (variable_identifier)
              (variable_identifier)))
          (chuck_operator)
          (variable_identifier)))
      (comment)
      (statement
        (chuck_operation
          (function_call
            (member_identifier
              (variable_identifier)
              (variable_identifier)))
          (chuck_operator)
          (array_declaration
            (primitive_type)
            (array_identifier
              (variable_identifier)))))
      (comment)
      (statement
        (chuck_operation
          (function_call
            (member_identifier
              (variable_identifier)
              (variable_identifier)))
          (chuck_operator)
          (array_declaration
            (primitive_type)
            (array_identifier
              (variable_identifier)))))
      (comment)
      (statement
        (chuck_operation
          (array_identifier
            (variable_identifier)
            (int))
          (chuck_operator)
          (variable_declaration
            (primitive_type)
            (variable_identifier))))
      (comment)
      (statement
        (chuck_operation
          (function_call
            (member_identifier
              (variable_identifier)
              (variable_identifier))
            (int))
          (chuck_operator)
          (variable_declaration
            (primitive_type)
            (variable_identifier))))
      (comment)
      (statement
        (chuck_operation
          (function_call
            (member_identifier
              (variable_identifier)
              (variable_identifier)))
          (function_call
            (variable_identifier)
            (int))
          (chuck_operator)
          (variable_declaration
            (primitive_type)
            (variable_identifier))))
      (comment)
      (statement
        (chuck_operation
          (function_call
            (member_identifier
              (variable_identifier)
              (variable_identifier)))
          (function_call
            (variable_identifier)
            (int))
          (chuck_operator)
          (variable_declaration
            (primitive_type)
            (variable_identifier))))
      (comment)
      (statement
        (chuck_operation
          (function_call
            (member_identifier
              (variable_identifier)
              (variable_identifier)))
          (chuck_operator)
          (variable_declaration
            (primitive_type)
            (variable_identifier))))
      (comment))))

===========
Overwriting
===========

adc => FFT fft => blackhole;

UAnaBlob blob1, blob2;
1::minute => now; //let time pass for a while
fft.upchuck() @=> blob1; // blob1 points to the analysis results
1::minute => now; // let time pass again
fft.upchuck() @=> blob2; // now both blob1 and blob2 refer to the same object: the new results!

---

(source_file
  (statement
    (chuck_operation
      (chuck_operation
        (keyword
          (global_unit_generator))
        (chuck_operator)
        (variable_declaration
          (class_identifier)
          (variable_identifier)))
      (chuck_operator)
      (keyword
        (global_unit_generator))))
  (statement
    (variable_declaration
      (class_identifier)
      (variable_identifier))
    (variable_identifier))
  (statement
    (chuck_operation
      (dur
        (int)
        (duration_identifier))
      (chuck_operator)
      (keyword
        (special_literal_value))))
  (comment)
  (statement
    (chuck_operation
      (function_call
        (member_identifier
          (variable_identifier)
          (variable_identifier)))
      (chuck_operator)
      (variable_identifier)))
  (comment)
  (statement
    (chuck_operation
      (dur
        (int)
        (duration_identifier))
      (chuck_operator)
      (keyword
        (special_literal_value))))
  (comment)
  (statement
    (chuck_operation
      (function_call
        (member_identifier
          (variable_identifier)
          (variable_identifier)))
      (chuck_operator)
      (variable_identifier)))
  (comment))

==============
Advancing time
==============

adc => FFT fft => blackhole;
1024 => fft.size;

UAnaBlob blob;
1::minute => now; //let time pass for a while
fft.upchuck() @=> blob; // blob holds the result of the FFT

512 => fft.size;
fft.upchuck() @=> blob; // time hasn't advanced since the last computation, so no re-computation is done

---

(source_file
  (statement
    (chuck_operation
      (chuck_operation
        (keyword
          (global_unit_generator))
        (chuck_operator)
        (variable_declaration
          (class_identifier)
          (variable_identifier)))
      (chuck_operator)
      (keyword
        (global_unit_generator))))
  (statement
    (chuck_operation
      (int)
      (chuck_operator)
      (member_identifier
        (variable_identifier)
        (variable_identifier))))
  (statement
    (variable_declaration
      (class_identifier)
      (variable_identifier)))
  (statement
    (chuck_operation
      (dur
        (int)
        (duration_identifier))
      (chuck_operator)
      (keyword
        (special_literal_value))))
  (comment)
  (statement
    (chuck_operation
      (function_call
        (member_identifier
          (variable_identifier)
          (variable_identifier)))
      (chuck_operator)
      (variable_identifier)))
  (comment)
  (statement
    (chuck_operation
      (int)
      (chuck_operator)
      (member_identifier
        (variable_identifier)
        (variable_identifier))))
  (statement
    (chuck_operation
      (function_call
        (member_identifier
          (variable_identifier)
          (variable_identifier)))
      (chuck_operator)
      (variable_identifier)))
  (comment))
